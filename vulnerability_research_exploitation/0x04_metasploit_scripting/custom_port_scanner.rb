#!/usr/bin/env ruby
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Auxiliary
    include Msf::Exploit::Remote::Tcp
    include Msf::Auxiliary::Scanner
    include Msf::Auxiliary::Report
  
    def initialize(info = {})
      super(update_info(info,
        'Name'           => 'Custom Port Scanner',
        'Description'    => %q{
          This module scans a range of TCP ports on a target or range of targets and
          identifies which ones are open.
        },
        'Author'         => [ 'Your Name' ],
        'License'        => MSF_LICENSE,
        'DefaultOptions' => {
          'RPORT' => 1
        }
      ))
  
      register_options(
        [
          OptInt.new('STARTPORT', [ true, 'The start of port range to scan', 1 ]),
          OptInt.new('ENDPORT', [ true, 'The end of port range to scan', 1000 ])
        ]
      )
    end
  
    def run_host(ip)
      start_port = datastore['STARTPORT']
      end_port = datastore['ENDPORT']
      
      if (start_port < 1 or start_port > 65535)
        print_error("STARTPORT must be a valid port number (1-65535)")
        return
      end
      
      if (end_port < 1 or end_port > 65535)
        print_error("ENDPORT must be a valid port number (1-65535)")
        return
      end
      
      if (start_port > end_port)
        print_error("STARTPORT must be less than or equal to ENDPORT")
        return
      end
      
      print_status("Running module against #{ip}")
      
      open_ports = []
      
      (start_port..end_port).each do |port|
        begin
          # Set RPORT for the TCP socket
          self.scanner_instance.datastore['RPORT'] = port
          
          # Connect to the remote service
          connect
          
          # If we get here, the connection succeeded
          print_good("#{ip}:#{port} - Port #{port} is open on #{ip}")
          open_ports << port
          
          # Report the open port
          report_service(
            :host => ip,
            :port => port,
            :state => Msf::ServiceState::Open
          )
        rescue ::Rex::ConnectionRefused, ::Rex::ConnectionError, ::Timeout::Error => e
          # Connection was refused or timed out, port is likely closed
          vprint_status("#{ip}:#{port} - Port #{port} is closed (#{e.message})")
        ensure
          # Always disconnect the socket
          disconnect
        end
      end
      
      if open_ports.empty?
        print_status("#{ip} - No open ports found within the specified range")
      else
        print_status("#{ip} - Open ports on #{ip}: #{open_ports.join(', ')}")
      end
    end
  end
